/**
 * Reference: https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/description/
 * 
 * 
*/

#include <iostream>
#include <vector>
#include <array>
using namespace std;
class Solution {
public:
    int dest;
    unsigned long min;
    int cnt;
    std::vector<bool> vec;
    //std::array<std::array<std::pair<unsigned long,int>, 200>, 200> dp;

    unsigned long dp[200] = {0, };
    int ways[200] = {0, };


    void go(vector<vector<int>>& roads, int to, unsigned long time, std::vector<bool>& v){
        // if(dp[dest]!=0 && dp[dest] < time){
        //     return;
        // }
        // if(time > min){
        //     return;
        // }
        if(to == dest){
            if(min > time){
                min = time;
                cnt = 1;
            }else if(min ==time){
                ++cnt;
            }
            // if(dp[dest] > time){
            //     dp[dest] = time;
            //     ways[dest] =1;
            //     cnt = 1;
            // }
            // else if(dp[dest] == time){
            //     ++ways[dest];
            //     ++cnt;
            // }
            return;
        }

        for(auto& item: roads){
            int tmp =time + item[2];
            if(item[1] == to && v[item[0]]== false && tmp <= dp[dest]){// && item[2] != 0){
                
                int t = dp[item[0]] ;
                int way = ways[item[1]];


                if(t==0){
                    ways[item[0]] = way;
                    dp[item[0]] = tmp;
                }else if(t== tmp){
                    ways[item[0]]++;

                }else if(t > tmp){
                    ways[item[0]] = way;
                    dp[item[0]] = tmp;
                }else{
                    continue;
                }
                v[item[0]]=true;
                go(roads,item[0], time+item[2], v);
                v[item[0]]=false;

            }
            else if(item[0] == to && v[item[1]]== false && tmp <= dp[dest]){//&& item[2] != 0){
                

                int t = dp[item[1]] ;
                int way = ways[item[0]];
                
                if(t==0){
                    dp[item[1]] = tmp;
                    ways[item[1]] = way;
                }else if(t == tmp){
                    ways[item[1]]++;
                }else if(t > tmp ){
                    ways[item[1]] = way;
                    dp[item[1]] = tmp;
                }else{
                    continue;

                }
                v[item[1]]=true;
                go(roads,item[1], time+item[2],v);
                v[item[1]]=false;
            }
        }
    }

    int countPaths(int n, vector<vector<int>>& roads) {
        //unsigned long time =0;  

        vec.resize(n,false);
        cnt =0;
        min = 1000000000;
        dest = n-1;
        dp[dest]=min;
        ways[dest] =0;
        vec[0]= true;
        for(auto& item: roads){
            if(item[0]==0){
                dp[item[1]] = item[2];
                ways[item[1]] = 1;
                vec[item[1]] =true;
                go(roads, item[1], item[2], vec);
                vec[item[1]] =false;
            }
            else if(item[1]==0){
                dp[item[0]] = item[2];
                ways[item[0]] = 1;
                vec[item[0]] =true;
                go(roads, item[0], item[2],vec);
                vec[item[0]] =false;
            }
        }

        for(int i=0 ; i< n; i++){
            std::cout<< ways[i]<<std::endl;
        }
        //std::cout <<"ans: "<< cnt-1 <<std::endl;
        return cnt;//
    }
};
/**

0->1, 0->4, 0->6
dp   0 1 2 3 4 5 6
       2 0 0 5 0 7  
ways   1     1   1

1->2, 1->3
dp   0 1 2 3 4 5 6
       2 5 5 5 0 7  
ways   1 1 1 1   1

2->5, 3->5
dp   0 1 2 3 4 5 6
       2 5 5 5 6 7  
ways   1 1 1 1 2 1

5->6
dp   0 1 2 3 4 5 6
       2 5 5 5 6 6  
ways   1 1 1 1 2 2

5->6
dp   0 1 2 3 4 5 6
       2 5 5 5 6 3  
ways   1 1 1 1 2 1

dp 0 num_way: 0 
dp 2 num_way: 1 
dp 5 num_way: 1 
dp 5 num_way: 1 
dp 5 num_way: 1 
dp 6 num_way: 2 
dp 7 num_way: 4

**/


int main()
{
    Solution s;

    //std::vector<std::vector<int>> sample{{0,1,4233},{1,2,5402},{0,3,17153},{2,3,7518},{3,1,12920},{0,4,25},{0,5,26859},{5,2,17224},{5,4,26834},{5,1,22626},{3,5,9706},{6,5,1669},{6,2,18893},{0,6,28528},{6,3,11375},{6,4,28503},{6,1,24295},{7,2,3378},{0,8,36208},{8,4,36183},{6,8,7680},{0,9,46027},{4,9,46002},{9,7,33014},{2,9,36392},{9,8,9819},{9,6,17499},{9,3,28874},{9,1,41794},{9,10,5734},{5,10,24902},{2,10,42126},{1,10,47528},{10,8,15553},{7,10,38748},{9,11,8417},{11,3,37291},{10,11,2683},{6,11,25916},{11,4,54419},{12,7,47736},{3,12,43596},{5,12,33890},{10,12,8988},{12,6,32221},{11,12,6305},{12,1,56516},{12,2,51114},{13,1,60560},{2,13,55158},{13,11,10349},{13,4,64768},{0,13,64793},{9,13,18766},{13,6,36265},{7,13,51780},{13,10,13032},{12,13,4044},{5,13,37934},{3,13,47640},{8,14,32645},{14,4,68828},{0,14,68853},{7,14,55840},{14,3,51700},{14,5,41994},{14,13,4060},{11,14,14409},{5,15,50783},{8,15,41434},{15,9,31615},{15,14,8789},{4,15,77617},{15,6,49114},{0,15,77642},{2,15,68007},{12,15,16893},{1,15,73409},{15,13,12849},{15,3,60489},{7,15,64629},{11,15,23198},{15,10,25881},{16,13,20123},{16,1,80683},{15,16,7274},{16,0,84916},{16,6,56388},{16,3,67763},{17,3,75033},{17,15,14544},{0,17,92186},{1,17,87953},{17,5,65327},{2,17,82551},{17,13,27393},{16,17,7270},{17,4,92161},{17,10,40425},{14,17,23333},{17,12,31437},{17,9,46159},{18,7,80595},{18,3,76455},{5,18,66749},{8,18,57400},{9,18,47581},{11,18,39164},{4,18,93583},{18,17,1422},{18,12,32859},{0,18,93608},{15,18,15966},{16,18,8692},{14,18,24755},{6,18,65080},{19,16,12261},{15,19,19535},{19,7,84164},{19,18,3569},{19,6,68649},{8,19,60969},{19,1,92944},{5,19,70318},{10,19,45416},{19,11,42733},{2,19,87542},{20,13,33827},{20,15,20978},{20,0,98620},{20,16,13704},{10,20,46859},{20,14,29767},{20,3,81467},{18,20,5012},{12,20,37871},{20,8,62412},{20,4,98595},{20,11,44176},{2,20,88985},{1,20,94387},{20,5,71761},{19,20,1443},{16,21,19446},{17,21,12176},{0,21,104362},{21,7,91349},{8,21,68154},{21,3,87209},{18,21,10754},{21,20,5742},{1,21,100129},{21,6,75834},{10,21,52601},{21,19,7185},{12,21,43613},{21,14,35509},{21,2,94727},{22,20,2033},{22,2,91018},{12,23,47214},{4,23,107938},{23,20,9343},{23,0,107963},{23,15,30321},{2,24,21315},{3,24,13797},{1,24,26717},{5,24,4091},{25,13,46183},{6,25,82448},{25,12,50227},{25,4,110951},{25,19,13799},{25,9,64949},{25,15,33334},{25,21,6614},{0,25,110976},{25,8,74768},{1,25,106743},{3,25,93823},{14,25,42123},{25,17,18790},{5,26,93928},{17,26,28601},{9,26,74760},{26,25,9811},{4,26,120762},{26,6,92259},{21,26,16425},{11,26,66343},{8,26,84579},{9,27,78280},{27,17,32121},{10,27,72546},{3,27,107154},{19,27,27130},{11,27,69863},{5,27,97448},{27,12,63558},{27,21,19945},{24,27,93357},{27,0,124307},{27,22,23654},{27,23,16344},{4,27,124282},{27,26,3520},{27,16,39391},{2,27,114672},{13,27,59514},{7,27,111294},{25,27,13331},{27,1,120074},{8,27,88099},{27,14,55454},{27,18,30699},{15,27,46665},{20,27,25687},{9,28,77263},{28,7,110277},{28,15,45648},{25,28,12314},{28,13,58497},{28,26,2503},{28,0,123290},{5,28,96431},{28,8,87082},{4,28,123265},{28,3,106137},{28,17,31104},{28,11,68846},{20,28,24670},{12,28,62541},{14,28,54437},{28,22,22637},{28,10,71529},{6,28,94762},{15,29,53502},{29,28,7854},{2,29,121509},{29,19,33967},{3,29,113991},{29,14,62291},{29,25,20168},{29,8,94936},{29,21,26782},{29,27,6837},{5,29,104285},{29,13,66351},{29,18,37536},{23,29,23181},{11,29,76700},{4,29,131119},{29,20,32524},{7,29,118131},{17,29,38958},{26,29,10357}};
    //std::vector<std::vector<int>> sample{{0,6,7},{0,1,2},{1,2,3},{1,3,3},{6,3,3},{3,5,1},{6,5,1},{2,5,1},{0,4,5},{4,6,2}};
    std::vector<std::vector<int>> sample{{0,6,7},{0,1,2},{1,2,3},{1,3,3},{6,3,3},{3,5,1},{6,5,1},{2,5,1},{0,4,5},{4,6,2}, {6,7,3},{5,7,4}}; // 6
    //std::vector<std::vector<int>> sample{{1,0,9611},{0,2,13741},{2,1,4130},{2,3,2339},{3,0,16080},{1,4,9725},{0,4,19336},{3,4,3256},{4,2,5595},{5,4,6224},{6,2,1303},{1,6,5433},{7,6,10824},{4,7,6532},{5,7,308},{7,1,16257},{6,8,14961},{8,4,10669},{8,0,30005},{5,8,4445},{8,3,13925},{8,7,4137},{2,8,16264},{9,4,12915},{0,9,32251},{8,9,2246},{10,7,14204},{0,10,40072},{6,10,25028},{10,8,10067},{10,3,23992},{10,2,26331},{10,1,30461},{4,10,20736},{5,10,14512},{9,10,7821},{11,4,3381},{12,4,27123},{9,12,14208},{10,12,6387},{8,12,16454},{12,0,46459},{7,12,20591},{12,5,20899},{2,12,32718},{12,11,23742},{1,12,36848},{6,12,31415},{5,13,25075},{13,10,10563},{3,13,34555},{13,12,4176},{13,8,20630},{13,1,41024},{13,11,27918},{13,7,24767},{4,13,31299},{2,13,36894},{10,14,8784},{12,14,2397},{4,14,29520},{6,14,33812},{9,14,16605},{14,3,32776},{5,14,23296},{14,2,35115},{8,14,18851},{7,14,22988},{10,15,9236},{15,3,33228},{15,0,49308},{15,12,2849},{4,16,41221},{16,8,30552},{10,16,20485},{16,11,37840},{16,6,45513},{16,14,11701},{3,16,44477},{1,16,50946},{16,5,34997},{16,7,34689},{12,16,14098},{16,0,60557},{16,13,9922},{2,16,46816},{16,9,28306},{17,9,36735},{17,3,52906},{16,17,8429},{8,17,38981},{7,17,43118},{6,17,53942},{4,17,49650},{17,14,20130},{17,13,18351},{17,10,28914},{17,11,46269},{1,17,59375},{15,17,19678},{17,12,22527},{15,18,27895},{18,12,30744},{18,11,54486},{18,4,57867},{3,18,61123},{18,16,16646},{13,18,26568},{18,8,47198},{1,18,67592},{17,18,8217},{0,18,77203},{6,18,62159},{18,14,28347},{19,13,32225},{11,19,60143},{5,19,57300},{19,15,33552},{10,19,42788},{6,19,67816},{7,19,56992},{19,18,5657},{19,1,73249},{16,19,22303},{8,19,52855},{17,19,13874},{19,3,66780},{19,9,50609},{19,0,82860},{19,4,63524},{4,20,69122},{18,20,11255},{3,20,72378},{11,20,65741},{14,20,39602},{10,20,48386},{1,20,78847},{20,5,62898},{20,15,39150},{20,19,5598},{16,20,27901},{12,20,41999},{0,20,88458},{8,20,58453},{20,13,37823},{20,7,62590},{9,20,56207},{2,20,74717},{20,17,19472},{17,21,26673},{16,21,35102},{3,21,79579},{21,18,18456},{21,9,63408},{21,20,7201},{2,21,81918},{21,11,72942},{14,22,50771},{22,19,16767},{22,18,22424},{22,15,50319},{22,13,48992},{22,3,83547},{6,22,84583},{22,5,74067},{22,10,59555},{16,22,39070},{22,20,11169},{22,12,53168},{4,22,80291},{22,2,85886},{22,8,69622},{22,21,3968},{22,17,30641},{0,22,99627},{11,22,76910},{22,7,73759},{2,23,87059},{23,6,85756},{5,23,75240},{23,21,5141},{9,23,68549},{14,23,51944},{20,23,12342},{1,23,91189},{8,23,70795},{11,23,78083},{23,13,50165},{23,22,1173},{12,23,54341},{23,3,84720},{23,10,60728},{23,17,31814},{21,24,5622},{14,24,52425},{24,20,12823},{7,24,75413},{24,2,87540},{25,1,101404},{13,25,60380},{25,7,85147},{9,25,78764},{15,25,61707},{19,25,28155},{25,22,11388},{25,17,42029},{25,5,85455},{16,25,50458},{25,4,91679},{25,23,10215},{25,14,62159},{24,25,9734},{25,21,15356},{25,10,70943},{25,20,22557},{3,25,94935},{0,25,111015},{19,26,31787},{14,26,65791},{26,3,98567},{26,15,65339},{26,25,3632},{24,26,13366},{9,26,82396},{18,26,37444},{26,17,45661},{26,1,105036},{22,26,15020},{26,5,89087},{10,26,74575},{26,2,100906},{11,26,91930},{13,26,64012},{26,12,68188},{26,4,95311},{20,26,26189},{0,26,114647},{26,21,18988},{0,27,100248},{21,27,4589},{2,27,86507},{4,27,80912},{27,9,67997},{14,27,51392},{27,15,50940},{27,10,60176},{27,11,77531},{27,13,49613},{0,28,124384},{28,12,77925},{28,27,24136},{28,26,9737},{28,10,84312},{28,13,73749},{28,16,63827},{20,28,35926},{28,23,23584},{29,6,100376},{29,23,14620},{29,17,46434},{29,25,4405},{22,29,15793},{29,15,66112},{5,29,89860},{0,29,115420},{13,29,64785},{29,4,96084},{29,19,32560},{29,21,19761},{29,26,773},{11,29,92703},{9,29,83169},{29,18,38217},{29,10,75348},{7,29,89552},{1,29,105809},{29,20,26962},{29,16,54863},{12,29,68961},{29,2,101679},{29,24,14139},{4,30,111360},{10,30,90624},{30,5,105136},{30,1,121085},{8,30,100691},{28,30,6312},{27,30,30448},{30,24,29415},{30,26,16049},{30,12,84237},{6,30,115652},{30,2,116955},{30,14,81840},{30,20,42238},{30,29,15276},{30,9,98445},{30,3,114616},{30,16,70139},{21,30,35037},{30,25,19681},{30,13,80061},{18,30,53493},{30,11,107979},{30,15,81388},{30,0,130696},{31,16,58739},{31,29,3876},{6,31,104252},{31,2,105555},{31,15,69988},{1,32,117525},{20,32,38678},{7,32,101268},{27,32,26888},{25,32,16121},{29,32,11716},{23,32,26336},{32,14,78280},{31,32,7840},{15,32,77828},{32,5,101576},{11,32,104419},{12,32,80677},{23,33,30143},{18,33,53740},{33,10,90871},{31,33,11647},{33,21,35284},{33,25,19928},{33,32,3807},{33,26,16296}};
    //vector<vector<int>> sample{{1,0,1587},{1,2,2593},{2,0,4180},{3,2,9574},{1,3,12167},{3,0,13754},{4,0,11339},{2,4,7159},{5,2,16487},{5,1,19080},{4,5,9328},{3,5,6913},{0,5,20667},{1,6,25715},{5,6,6635},{7,1,33575},{7,2,30982},{7,4,23823},{7,6,7860},{5,7,14495},{0,7,35162},{5,8,16014},{7,8,1519},{9,2,34658},{6,9,11536},{9,4,27499},{9,1,37251},{9,3,25084},{5,9,18171},{9,8,2157},{10,1,32781},{10,6,7066},{10,3,20614},{2,11,34615},{11,7,3633},{11,1,37208},{12,7,12859},{12,9,9183},{12,10,13653},{12,5,27354},{11,12,9226},{12,2,43841},{6,12,20719},{0,12,48021},{12,4,36682},{1,12,46434}};
    // int mat[30][30] ={0,};
    // for(auto& item:sample){
    //     int x= item[0];
    //     int y= item[1];

    //     mat[x][y] = item[2];
    // }


    // for(int x=0;x<30; x++){
    //     for(int y=0; y<30 ; y++){
    //         std::cout<<"["<<x<<"]"<<"["<<y<<"]"<<mat[x][y]<<std::endl;
    //     }
    // }


    std::cout<< s.countPaths(8, sample) <<std::endl;


    return 0;
}